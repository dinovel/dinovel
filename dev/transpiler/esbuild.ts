import { denoPlugin } from 'https://deno.land/x/esbuild_deno_loader@0.6.0/mod.ts';
import {
  build as runESBuild,
  BuildOptions as ESBuildOptions,
  BuildResult as ESBuildBaseResult,
  initialize as initializeEsBuild,
  OutputFile as ESBuildOutputFile,
  Plugin as ESBuildPlugin,
} from 'https://deno.land/x/esbuild@v0.16.4/mod.js';
import { parse } from 'deno/path/mod.ts';
import { FileTranspiler, TranspileOptions, TranspileResult } from './models.ts';

let ESBuildInitState = false;

export interface ESBuild {
  build: typeof runESBuild;
  initialize: () => Promise<void>;
}

export type EsBuildResult = ESBuildBaseResult & { outputFiles: ESBuildOutputFile[] };

export class ESBuildTranspiler implements FileTranspiler {
  #esBuild: ESBuild;

  constructor(esBuild?: ESBuild) {
    this.#esBuild = esBuild ?? { build: runESBuild, initialize: initializeEsBuildContext };
  }

  async transpile(options: TranspileOptions): Promise<TranspileResult> {
    await this.#esBuild.initialize();

    const esBuildOptions = buildESBuilOptions(options);

    try {
      const buildResult = await this.#esBuild.build(esBuildOptions) as EsBuildResult;
      return processResult(options, buildResult);
    } catch (error) {
      const err = error instanceof Error ? error : new Error('Unknown error');

      return {
        diagnostics: [{
          message: err.message,
          type: 'error',
        }],
        success: false,
        extra: error,
        target: options.target,
      };
    }
  }
}

function buildDenoPlugin(context: TranspileOptions): ESBuildPlugin {
  return (context.useImportMap
    ? denoPlugin({ importMapURL: context.importMapURL })
    : denoPlugin()) as unknown as ESBuildPlugin;
}

function buildESBuilOptions(context: TranspileOptions): ESBuildOptions {
  return {
    entryPoints: { [parse(context.target.href).name]: context.target.href },
    bundle: true,
    format: 'esm',
    metafile: true,
    minify: context.optimize,
    outdir: '.',
    absWorkingDir: Deno.cwd(),
    outfile: '',
    platform: 'neutral',
    plugins: [buildDenoPlugin(context)],
    splitting: false,
    target: ['chrome99', 'firefox99', 'safari15'],
    treeShaking: true,
    write: false,
    incremental: true,
    charset: 'utf8',
    banner: { js: '// File generated by DINOVEL' },
    keepNames: false,
    logLevel: 'warning',
    logLimit: 50,
    sourceRoot: parse(context.target.href).dir,
    sourcemap: context.optimize ? 'inline' : false,
  };
}

async function initializeEsBuildContext(): Promise<void> {
  if (ESBuildInitState) return;
  await initializeEsBuild({});
  ESBuildInitState = true;
}

function processResult(context: TranspileOptions, res: EsBuildResult): TranspileResult {
  const tRes: TranspileResult = res.outputFiles.length > 0
    ? {
      diagnostics: [],
      output: res.outputFiles[0].text,
      success: true,
      target: context.target,
      extra: res,
    }
    : {
      diagnostics: [],
      success: false,
      target: context.target,
      extra: res,
    };

  for (const m of res.errors) {
    tRes.diagnostics.push({
      message: m.text,
      type: 'error',
      column: m.location?.column,
      line: m.location?.line,
      file: m.location?.file,
    });
  }

  for (const m of res.warnings) {
    tRes.diagnostics.push({
      message: m.text,
      type: 'warning',
      column: m.location?.column,
      line: m.location?.line,
      file: m.location?.file,
    });
  }

  return tRes;
}
